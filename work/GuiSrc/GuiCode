import tkinter as tk
from tkinter import filedialog
from PIL import ImageTk, Image
import numpy as np
import cv2

# import the Haarcascade classifier
face_cascade = cv2.CascadeClassifier("work\stop_data.xml")

# initialize the GUI
root = tk.Tk()
root.title("Sign Detection")

# function to open an image file and display it on the GUI
def open_image():
    file_path = filedialog.askopenfilename()
    image = cv2.imread(file_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = Image.fromarray(image)
    image = ImageTk.PhotoImage(image)
    image_label.config(image=image)
    image_label.image = image
    detect_signs(file_path)
    size = (200, 200)
# function to detect the signs in the image
def detect_signs(file_path):
    image = cv2.imread(file_path)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    signs = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)
    for (x,y,w,h) in signs:
        cv2.rectangle(image,(x,y),(x+w,y+h),(255,0,0),2)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = Image.fromarray(image)
    image = ImageTk.PhotoImage(image)
    image_label.config(image=image)
    image_label.image = image

# Create a Scale widget
size_scale = tk.Scale(root, from_=50, to=500, orient="horizontal", label="Image Size")
size_scale.pack()

# Create a function to handle the scale's value change
def on_scale_change(val):
    new_size = int(val)
    # resize the image according to the new size
    resized_image = cv2.resize(original_image, (new_size, new_size), interpolation = cv2.INTER_LINEAR)
    # update the image_label with the resized image
    image_label.config(image=resized_image)
    image_label.image = resized_image

# Bind the Scale's value change to the function
size_scale.bind("<ButtonRelease-1>", lambda event: on_scale_change(size_scale.get()))

# Create a canvas widget
canvas = tk.Canvas(root)
canvas.pack(side="left", fill="both", expand=True)

# Create a scrollbar widget
scrollbar = tk.Scrollbar(root, command=canvas.yview)
scrollbar.pack(side="right", fill="y")

# Configure the canvas to use the scrollbar
canvas.configure(yscrollcommand=scrollbar.set)

# Update the canvas to show the image
canvas.config(scrollregion=canvas.bbox(tk.ALL))

# button to open an image file
open_button = tk.Button(root, text="Open Image", command=open_image)
open_button.pack()

# label to display the selected image
image_label = tk.Label(root)
image_label.pack()

root.mainloop()
